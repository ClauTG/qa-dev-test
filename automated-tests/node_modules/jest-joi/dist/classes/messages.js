"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BeLikeMessage = exports.BeMessage = exports.MatchMessage = void 0;
const _1 = require(".");
const messages_1 = require("../messages");
const shared_1 = require("../messages/shared");
class Message {
    fn;
    lines;
    text;
}
class MatchMessage extends Message {
    constructor(context, name, result, received, schema) {
        super();
        const hint = new _1.Hint(name, context);
        if (!schema.isValid)
            this.lines = messages_1.messages.invalidSchema(hint, schema);
        else if (result.pass)
            this.lines = messages_1.messages.negatedMatch(hint, schema, received);
        else if (received.isSimple)
            this.lines = messages_1.messages.simpleMismatch(hint, received, result);
        else
            this.lines = messages_1.messages.complexMismatch(hint, result);
        this.text = (0, shared_1.stack)(this.lines);
        this.fn = (0, shared_1.print)(this.text);
    }
}
exports.MatchMessage = MatchMessage;
class BeMessage extends Message {
    constructor(context, name, received) {
        super();
        const hint = new _1.Hint(name, context);
        if (context.isNot && received.input.isCompiled)
            this.lines = messages_1.messages.negatedSchema(hint, received);
        else
            this.lines = messages_1.messages.notSchema(hint, received);
        this.text = (0, shared_1.stack)(this.lines);
        this.fn = (0, shared_1.print)(this.text);
    }
}
exports.BeMessage = BeMessage;
class BeLikeMessage extends Message {
    constructor(context, name, received) {
        super();
        const hint = new _1.Hint(name, context);
        if (context.isNot && received.isValid)
            this.lines = messages_1.messages.negatedSchema(hint, received);
        else
            this.lines = messages_1.messages.notSchema(hint, received);
        this.text = (0, shared_1.stack)(this.lines);
        this.fn = (0, shared_1.print)(this.text);
    }
}
exports.BeLikeMessage = BeLikeMessage;
