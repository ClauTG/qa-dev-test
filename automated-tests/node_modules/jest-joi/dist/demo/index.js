"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.demo = void 0;
const __1 = require("..");
const chalk = require("chalk");
let env = "";
function log(content) {
    if (env !== "test")
        console.log(content);
}
function logBreak() {
    if (env !== "runkit" && env !== "test")
        console.log("");
}
function passText() {
    if (env === "runkit")
        return "[PASS]";
    else
        return " PASS ";
}
function failText() {
    if (env === "runkit")
        return "[FAIL]";
    else
        return " FAIL ";
}
function pass() {
    log(chalk.black.bgGreen(passText()));
}
function fail(message) {
    log(chalk.black.bgRed(failText()));
    logBreak();
    log(message);
}
function asyncUnsupported(expected) {
    log("This demo environment doesn't support async tests. Install jest-joi in your local environment instead!");
    expected;
}
function assessResult(result, context) {
    if (result.pass && context.isNot === false)
        pass();
    else if (result.pass === false && context.isNot === true)
        pass();
    else
        fail(result.message.call(context));
}
function makeMatchSchemaMatcher(context, received) {
    return function toMatchSchema(schema, options) {
        const result = __1.matchers.toMatchSchema.call(context, received, schema, options);
        assessResult(result, context);
    };
}
function makeBeSchemaMatcher(context, received) {
    return function toBeSchema() {
        const result = __1.matchers.toBeSchema.call(context, received);
        assessResult(result, context);
    };
}
function makeBeSchemaLikeMatcher(context, received) {
    return function toBeSchemaLike() {
        const result = __1.matchers.toBeSchemaLike.call(context, received);
        assessResult(result, context);
    };
}
const exitSet = {
    toMatchSchema: asyncUnsupported,
    toBeSchema: asyncUnsupported,
    toBeSchemaLike: asyncUnsupported,
    not: {
        toMatchSchema: asyncUnsupported,
        toBeSchema: asyncUnsupported,
        toBeSchemaLike: asyncUnsupported,
    },
};
const expect = (received) => {
    return {
        resolves: exitSet,
        rejects: exitSet,
        toMatchSchema: makeMatchSchemaMatcher({ isNot: false, promise: "" }, received),
        toBeSchema: makeBeSchemaMatcher({ isNot: false, promise: "" }, received),
        toBeSchemaLike: makeBeSchemaLikeMatcher({ isNot: false, promise: "" }, received),
        not: {
            toMatchSchema: makeMatchSchemaMatcher({ isNot: true, promise: "" }, received),
            toBeSchema: makeBeSchemaMatcher({ isNot: true, promise: "" }, received),
            toBeSchemaLike: makeBeSchemaLikeMatcher({ isNot: true, promise: "" }, received),
        },
    };
};
const test = (name, fn) => {
    log(chalk.bold(name));
    logBreak();
    fn();
    logBreak();
};
function demo(envInput) {
    env = envInput;
    logBreak();
    log(chalk.bold.yellow.inverse("This is a demo environment for Jest Joi. Do not call `.demo()` in your actual project."));
    logBreak();
    return { expect, test };
}
exports.demo = demo;
